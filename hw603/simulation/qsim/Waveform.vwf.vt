// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2023 16:53:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          hw603
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hw603_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i;
reg s0;
reg s1;
// wires                                               
wire q0;
wire q1;
wire q2;
wire q3;

// assign statements (if any)                          
hw603 i1 (
// port map - connection between master ports and signals/registers   
	.i(i),
	.q0(q0),
	.q1(q1),
	.q2(q2),
	.q3(q3),
	.s0(s0),
	.s1(s1)
);
initial 
begin 
#1000000 $finish;
end 

// i
always
begin
	i = 1'b0;
	i = #5000 1'b1;
	#5000;
end 

// s1
initial
begin
	repeat(6)
	begin
		s1 = 1'b0;
		s1 = #80000 1'b1;
		# 80000;
	end
	s1 = 1'b0;
end 

// s0
initial
begin
	repeat(12)
	begin
		s0 = 1'b0;
		s0 = #40000 1'b1;
		# 40000;
	end
	s0 = 1'b0;
end 
endmodule

