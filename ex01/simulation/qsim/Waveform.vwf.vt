// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2023 15:42:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ex01
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ex01_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pin01;
reg pin02;
reg pin03;
reg pin04;
reg pin05;
reg pin06;
reg pin07;
// wires                                               
wire output01;
wire output02;
wire output03;
wire output04;

// assign statements (if any)                          
ex01 i1 (
// port map - connection between master ports and signals/registers   
	.output01(output01),
	.output02(output02),
	.output03(output03),
	.output04(output04),
	.pin01(pin01),
	.pin02(pin02),
	.pin03(pin03),
	.pin04(pin04),
	.pin05(pin05),
	.pin06(pin06),
	.pin07(pin07)
);
initial 
begin 
#1000000 $finish;
end 

// pin01
always
begin
	pin01 = 1'b0;
	pin01 = #50000 1'b1;
	#50000;
end 

// pin02
initial
begin
	pin02 = 1'b1;
	# 25000;
	repeat(9)
	begin
		pin02 = 1'b0;
		pin02 = #50000 1'b1;
		# 50000;
	end
	pin02 = 1'b0;
	pin02 = #50000 1'b1;
end 

// pin03
always
begin
	pin03 = 1'b0;
	pin03 = #50000 1'b1;
	#50000;
end 

// pin04
initial
begin
	pin04 = 1'b1;
	# 25000;
	repeat(9)
	begin
		pin04 = 1'b0;
		pin04 = #50000 1'b1;
		# 50000;
	end
	pin04 = 1'b0;
	pin04 = #50000 1'b1;
end 

// pin05
always
begin
	pin05 = 1'b0;
	pin05 = #50000 1'b1;
	#50000;
end 

// pin06
always
begin
	pin06 = 1'b0;
	pin06 = #50000 1'b1;
	#50000;
end 

// pin07
initial
begin
	pin07 = 1'b1;
	# 25000;
	repeat(9)
	begin
		pin07 = 1'b0;
		pin07 = #50000 1'b1;
		# 50000;
	end
	pin07 = 1'b0;
	pin07 = #50000 1'b1;
end 
endmodule

